fragment repos on RepositoryConnection {
  pageInfo {
    endCursor
    hasNextPage
  }
  nodes {
    createdAt
    defaultBranchRef {
      target {
        __typename
        ... on Commit {
          history(
            author: {
              emails: [$email],
            },
            first: 1,
          ) {
            nodes {
              committedDate
            }
          }
        }
      }
    }
    forkCount
    isArchived
    isDisabled
    isEmpty
    isFork
    isMirror
    isPrivate
    nameWithOwner
    languages(first: 100) {
      edges {
        size
      }
      nodes {
        color
        name
      }
      totalSize
    }
    licenseInfo {
      nickname
      spdxId
      name
    }
    owner {
      __typename
      login
    }
    parent {
      owner {
        __typename
        login
      }
    }
    stargazerCount
    url
  }
}

query UserReposQuery($login: String!, $email: String!, $after: String) {
  user(login: $login) {
    createdAt
    repositories(
      affiliations: [COLLABORATOR, OWNER],
      after: $after,
      orderBy: {
        direction: ASC,
        field: NAME,
      },
      privacy: PUBLIC,
    ) {
      ...repos
    }
  }
}

query OrganizationReposQuery($login: String!, $email: String!, $after: String) {
  organization(login: $login) {
    repositories(
      affiliations: [OWNER],
      after: $after,
      orderBy: {
        direction: ASC,
        field: NAME,
      },
      privacy: PUBLIC,
    ) {
      ...repos
    }
  }
}

query UserContributedReposQuery($login: String!, $email: String!, $after: String) {
  user(login: $login) {
    repositoriesContributedTo(
      after: $after,
      contributionTypes: [COMMIT],
      first: 100,
      includeUserRepositories: true,
      orderBy: {
        direction: ASC,
        field: NAME,
      },
      privacy: PUBLIC,
    ) {
      pageInfo {
        endCursor
        hasNextPage
      }
      nodes {
        defaultBranchRef {
          target {
            __typename
            ... on Commit {
              history(
                author: {
                  emails: [$email],
                },
                first: 1,
              ) {
                nodes {
                  committedDate
                }
              }
            }
          }
        }
        isFork
        nameWithOwner
        owner {
          __typename
          login
        }
        parent {
          owner {
            __typename
            login
          }
        }
        url
      }
    }
  }
}

# Adapted from queries in
# https://github.com/lowlighter/metrics/blob/master/source/plugins/followup/querie/s
query IssuesAndPrsQuery {
  issues_created:search(query: "author:autarch is:issue is:public -user:10gen -user:mongodb", type: ISSUE, first: 0) {
    issueCount
  }
  issues_closed:search(query: "author:autarch is:issue is:closed is:public -user:10gen -user:mongodb", type: ISSUE, first: 0) {
    issueCount
  }
  prs_created:search(query: "author:autarch is:pr is:public -user:10gen -user:mongodb", type: ISSUE, first: 0) {
    issueCount
  }
  prs_merged:search(query: "author:autarch is:pr is:merged is:public -user:10gen -user:mongodb", type: ISSUE, first: 0) {
    issueCount
  }
}
